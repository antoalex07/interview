/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Chair.gltf 
Author: AK STUDIO (https://sketchfab.com/inven2000)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/office-chair-af2f07d06f6349158c1d24d87f5ceb95
Title: Office chair
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { proxy, useSnapshot } from 'valtio';
import { HexColorPicker } from 'react-colorful';

const state = proxy({
  current: null,
  Chair: "#ffffff"
});

export default function Model(props) {
  const { nodes, materials } = useGLTF('./chair/Chair.gltf')
  const ref = useRef();
  const snap = useSnapshot(state);
  const [hover, setHover] = useState(null);

  const handlePointerOver = (e) => {
    e.stopPropagation()
    setHover(e.object.material.name)
  }

  const handlePointerOut = (e) => {
    e.intersections.length === 0 && setHover(null)
  }

  const handlePointerDown = (e) => {
    e.stopPropagation();
    state.current = e.object.material.name;
  }

  const handlePointerMissed = (e) => {
    state.current = null;
  }

  // useFrame(() => {
  //   materials.Chair.color.set(state.items.sofa).multiplyScalar(2)
  // })

  return (
    <group 
      ref={ref} 
      {...props} 
      dispose={null}
      onPointerOver={handlePointerOver}
      onPointerOut={handlePointerOut}
      onPointerDown={handlePointerDown}
      onPointerMissed={handlePointerMissed}>
      
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.531}>
        <mesh material-color={snap.Chair} geometry={nodes.defaultMaterial.geometry} material={materials.Chair} rotation={[Math.PI / 2, 0, 0]} />
      </group>
    </group>
  )
}

export function Picker() {
  const snap = useSnapshot(state);
  
  const handleColorChange = (color) => {
    state.Chair = color;
  }

  return (
    <div style={{display: snap.current ? "block" : "none",
      alignItems: "center",
      position: "relative"
    }}>
      <HexColorPicker className='picker'
        color={snap.Chair}
        onChange={handleColorChange}
      /> 
      <h1 className='heading'>{snap.current}</h1>
    </div>
  )
}

useGLTF.preload('./chair/Chair.gltf')
