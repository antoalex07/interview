/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Chair2.gltf 
Author: valeduque_portfolio (https://sketchfab.com/valeduque_portfolio)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/eames-chair-a699822777e94849b1417a2a3c185e10
Title: Eames chair
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { proxy, useSnapshot } from 'valtio'
import { HexColorPicker } from 'react-colorful'

const defaultColors = {
  Material1: '#ffffff',
  plastic_wit: '#ffffff',
  skp_front_default: '#ffffff',
  onderstel: '#ffffff'
}


const state = proxy({
  current: null,
  items: { ...defaultColors } 
})

export default function Model(props) {
  const { nodes, materials } = useGLTF('./chair2/Chair2.gltf')
  const ref = useRef();
  const snap = useSnapshot(state);
  const [hover, setHover] = useState(null);

  const handlePointerOver = (e) => {
    e.stopPropagation()
    setHover(e.object.material.name)
  }

  const handlePointerOut = (e) => {
    e.intersections.length === 0 && setHover(null)
  }

  const handlePointerDown = (e) => {
    e.stopPropagation();
    state.current = e.object.material.name;
  }

  const handlePointerMissed = (e) => {
    state.current = null;
  }

  return (
    <group 
        ref={ref}
        {...props} 
        dispose={null}
        onPointerOver={handlePointerOver}
        onPointerOut={handlePointerOut}
        onPointerDown={handlePointerDown}
        onPointerMissed={handlePointerMissed}>

      <group position={[-0.003, 0, -0.033]} rotation={[-1.569, 0, 0.081]}>
        <mesh material-color={snap.items.Material1} geometry={nodes.Object_2.geometry} material={materials.Material1} />
        <mesh material-color={snap.items.plastic_wit} geometry={nodes.Object_3.geometry} material={materials.plastic_wit} />
        <mesh material-color={snap.items.skp_front_default} geometry={nodes.Object_4.geometry} material={materials.skp_front_default} />
        <mesh material-color={snap.items.onderstel} geometry={nodes.Object_5.geometry} material={materials.onderstel} />
      </group>
    </group>
  )
}

export function Picker1() {

  const snap = useSnapshot(state);
  
  const handleColorChange = (color) => {
    state.items[snap.current] = color;
  }

  const resetColors = () => {
    state.items = { ...defaultColors };  // Reset to default colors
  }


  return (
    <div style={{display: snap.current ? "block" : "none",
      alignItems: "center",
      position: "relative"
    }}>
      <HexColorPicker className='picker'
        color={snap.items[snap.current]}
        onChange={handleColorChange}
      /> 
      <h1 className='heading'>{snap.current}</h1>

      <button onClick={resetColors} style={{marginTop: '10px'}}>
        Reset to Default
      </button>
    </div>
  )
}

useGLTF.preload('./chair2/Chair2.gltf')
